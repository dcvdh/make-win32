--- a/src/w32/subproc/sub_proc.c
+++ b/src/w32/subproc/sub_proc.c
@@ -546,7 +546,54 @@
                 && strpbrk(fname, " \t") != NULL);
 }
 
+char* find_busybox_w32(const char* path_var)
+{
+        const static char busybox[] = "busybox.exe";
 
+        char* fullname = xmalloc(MAX_PATH);
+        HANDLE handle = find_file(busybox, path_var,
+                fullname, MAX_PATH);
+
+        return handle != INVALID_HANDLE_VALUE ? fullname : NULL;
+}
+
+int busybox_w32_has_command(const char* busybox, const char* cmd)
+{
+        int found = 0;
+
+        char* query = NULL;
+        if (asprintf(&query, "%s %s", busybox, "--list") == -1)
+                return 0;
+
+        FILE* list = popen(query, "r");
+        if (list) {
+                char line[81];
+                while (fscanf(list, "%80s", line) == 1) {
+                        if (!strcmp(line, cmd)) {
+                                found = 1;
+                                break;
+                        }
+                }
+                pclose(list);
+        }
+
+        free(query);
+        return found;
+}
+
+char** copy_and_shift_argv(const char** argv, size_t shift_by)
+{
+        // argv is terminated by a NULL element.
+        size_t argv_elems = 0;
+        while (argv[argv_elems++]);
+
+        size_t argv_size = argv_elems * sizeof(char*);
+        char** new_argv = xcalloc(shift_by * sizeof(char*) + argv_size);
+        memcpy(new_argv + shift_by, argv, argv_size);
+
+        return new_argv;
+}
+
 /*
  * Description:   Create the child process to be helped
  *
@@ -686,9 +733,23 @@
 
         flags = 0;
 
-        if (file_not_found)
+        if (file_not_found) {
+                char* busybox = find_busybox_w32(path_var);
+                int from_busybox = busybox &&
+                        busybox_w32_has_command(busybox, exec_path);
+
+                if (from_busybox) {
+                        argv = copy_and_shift_argv(argv, 1);
+                        exec_path = argv[0] = busybox;
+                }
+
                 command_line = make_command_line( shell_name, exec_path, argv);
-        else {
+
+                if (from_busybox) {
+                        free(argv);
+                        free(busybox);
+                }
+        } else {
                 /* If exec_fname includes whitespace, CreateProcess
                    behaves erratically and unreliably, and often fails
                    if argv[0] also includes whitespace (and thus will
